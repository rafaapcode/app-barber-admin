generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique
  email           String    @unique
  name            String
  profileImage    String
  userName        String?
  barberShopsRate Json?
  Account         Account[]
}

model Administrator {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String
  password String
  fillInfo Boolean @default(false)
  image    String?

  accounts Account[]
  barbers  Barber[]
  info     InfoAdm?
}

model InfoAdm {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  nomeBarbearia    String   @unique
  cep              Int
  num              Int
  streetName       String
  districtName     String
  workingPeriod    String
  openWeekend      Boolean
  banner           String
  barbershopImages String[]
  barbersImages    String[]
  logo             String

  adm             Administrator @relation(fields: [administratorId], references: [id], onDelete: Cascade)
  administratorId String        @unique @db.ObjectId
}

model Barber {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String
  password String
  fillInfo Boolean @default(false)
  image    String?

  accounts      Account[]
  administrator Administrator @relation(fields: [admId], references: [id], onDelete: Cascade)
  admId         String        @unique @db.ObjectId
  info          InfoBarber?
}

model InfoBarber {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  cutImages   String[]
  bannerImage String
  photo       String
  description String?
  services    String[]

  barber   Barber @relation(fields: [barberId], references: [id], onDelete: Cascade)
  barberId String @unique @db.ObjectId
}

model ServiceType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Administrator   Administrator? @relation(fields: [administratorId], references: [id])
  administratorId String?        @db.ObjectId
  Barber          Barber?        @relation(fields: [barberId], references: [id])
  barberId        String?        @db.ObjectId

  @@unique([provider, providerAccountId])
}
